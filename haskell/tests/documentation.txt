Since the type of the first argument to your reward function is explicitly defined as Int (i.e., reward :: Int -> State -> Action -> State -> Val), Haskell's type system guarantees that the value passed to it will already be an integer.

This means that you don’t need to explicitly check whether the first argument is an integer, because the type system ensures that it will always be an Int. Here's how it works:

    Haskell is a statically typed language, meaning types are checked at compile time.
    The type Int is specifically used to represent integer values.
    If you try to pass a non-integer value (e.g., a string or a floating-point number), Haskell will give you a compile-time error.

Why No Check is Needed:

You can think of it like this:

    If you try to pass a string or a float to reward, Haskell will prevent the program from even compiling because they are incompatible with the expected Int type.
    For example:

    reward "string" DHU Unit SHU  -- This will not compile because "string" is not an Int.
    reward 5.0 DHU Unit SHU        -- This will not compile because 5.0 is a Float, not an Int.

When to Check for Valid Input:

While you don’t need to check for types (since the type system handles that), you might still want to:

    Validate values for logical correctness (even though they are integers) – for example, ensuring that an Int is within a certain range or meets some domain-specific condition.
    Handle corner cases or error situations when the values may be invalid according to the logic of your program (though this is not common for basic types like Int).

For example, if reward takes an integer that represents some value within a range (e.g., 1 to 10), you might want to check that it's within that range:

reward :: Int -> State -> Action -> State -> Val
reward _ _ _ next_x
  | next_x == DHU || next_x == SHU = 1
  | otherwise = 0

However, since your function doesn't seem to have any additional constraints on the integer, there’s no need to implement such a check unless there's a specific business rule requiring it.
Conclusion:

    The type system guarantees that the input will be an integer (Int), so you don't need to check for that.
    If needed, you can add additional checks for logical correctness of the integer value, but that's not typically necessary for simple types like Int.